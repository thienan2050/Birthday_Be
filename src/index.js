const sectors = [
  { color: "#FFD700", text: "#333333", label: "M√†n h√¨nh + B√†n ph√≠m" },      // V√†ng gold
  { color: "#FF6347", text: "#ffffff", label: "Th·∫ª BHSK B·∫£o Vi·ªát" },         // ƒê·ªè cam
  { color: "#7FFFD4", text: "#333333", label: "M√°y ch·∫°y b·ªô" },               // Xanh ng·ªçc
  { color: "#9370DB", text: "#ffffff", label: "ThƒÉm b√°c s·ªπ" },               // T√≠m nh·∫°t
  { color: "#00CED1", text: "#ffffff", label: "B√†n l√†m vi·ªác di ƒë·ªông" },      // Xanh bi·ªÉn
  { color: "#FF69B4", text: "#ffffff", label: "Apple watch" },               // H·ªìng ƒë·∫≠m
  { color: "#1E90FF", text: "#ffffff", label: "Skin care spa" },             // Xanh d∆∞∆°ng s√°ng
  { color: "#FF4500", text: "#ffffff", label: "Voice course" },              // Cam ƒë·ªè
  { color: "#7CFC00", text: "#333333", label: "Mic thu √¢m" },                // Xanh l√° s√°ng
];


const events = {
  listeners: {},
  addListener: function (eventName, fn) {
    this.listeners[eventName] = this.listeners[eventName] || [];
    this.listeners[eventName].push(fn);
  },
  fire: function (eventName, ...args) {
    if (this.listeners[eventName]) {
      for (let fn of this.listeners[eventName]) {
        fn(...args);
      }
    }
  },
};

const rand = (m, M) => Math.random() * (M - m) + m;
const tot = sectors.length;
const spinEl = document.querySelector("#spin");
const ctx = document.querySelector("#wheel").getContext("2d");
const dia = ctx.canvas.width;
const rad = dia / 2;
const PI = Math.PI;
const TAU = 2 * PI;
const arc = TAU / sectors.length;



const friction = 0.998; // 0.995=soft, 0.99=mid, 0.98=hard
let angVel = 0; // Angular velocity
let ang = 0; // Angle in radians
let result = 0;

let spinButtonClicked = false;

const getIndex = () => Math.floor(tot - (ang / TAU) * tot) % tot;

const reasonMapping = {
  "M√†n h√¨nh + B√†n ph√≠m": "Anh m·ªõi bi·∫øt em t·ª´ng ph·∫´u thu·∫≠t Lasik, n√™n t·ª´ n√†y em ph·∫£i d√πng m√†n h√¨nh r·ªùi ƒë·ªÉ b·∫£o v·ªá m·∫Øt nha.",
  "Th·∫ª BHSK B·∫£o Vi·ªát": "M·ªôt Marketinger t·ª´ng n√≥i r·∫±ng, s·ª©c kho·∫ª l√† th·ª© v·ªõ v·∫©n cho t·ªõi khi b·ªánh t·∫≠t √πa t·ªõi, l√† g√°nh n·∫∑ng n·∫øu kh√¥ng c√≥ ti·ªÅn ƒë√≥ng vi·ªán ph√≠.",
  "M√°y ch·∫°y b·ªô": "L√†m vi·ªác 30p, ƒëi b·ªô 5 ph√∫t ch·∫Øc ch·∫Øn kh√¥ng ph·∫£i style l√†m vi·ªác c·ªßa c√¥ng ty Marketing.",
  "ThƒÉm b√°c s·ªπ": "Anh c√≤n ph√°t hi·ªán ra em c√≥ u v√† c√≥ s·ªèi th·∫≠n n·ªØa >.<",
  "B√†n l√†m vi·ªác di ƒë·ªông": "B√†n n√†y gi√∫p em ƒë·ªïi t∆∞ th·∫ø l√†m vi·ªác, n√≥ r·∫•t c·∫ßn cho nh·ªØng marketingers.",
  "Apple watch": "Gi√∫p em b·ªõt c·∫Øm m·∫∑t v√†o ƒëi·ªán tho·∫°i l·∫°i, ignore nh·ªØng tin nh·∫Øn v·ªõ v·∫©n.",
  "Skin care spa": "Y√™u th∆∞∆°ng b·∫£n th√¢n, chƒÉm s√≥c l√†n da t∆∞∆°i tr·∫ª.",
  "Voice course": "Kho√° h·ªçc n√†y ƒë·ªÉ x√¢y d·ª±ng m·ªëi quan h·ªá, khi n√†o xong eCV, ki·∫øm ƒë∆∞·ª£c m·ªôt s·ªë ti·ªÅn nh·∫•t ƒë·ªãnh th√¨ em s·∫Ω ƒëi h·ªçc nha.",
  "Mic thu √¢m": "Voice's setup."
};



function drawSector(sector, i) {
  const ang = arc * i;
  ctx.save();

  // COLOR
  ctx.beginPath();
  ctx.fillStyle = sector.color;
  ctx.moveTo(rad, rad);
  ctx.arc(rad, rad, rad, ang, ang + arc);
  ctx.lineTo(rad, rad);
  ctx.fill();

  // TEXT
  ctx.translate(rad, rad);
  ctx.rotate(ang + arc / 2);
  ctx.textAlign = "right";
  ctx.fillStyle = sector.text;
  ctx.font = "bold 25px 'Lato', sans-serif";
  ctx.fillText(sector.label, rad - 10, 10);
  //

  ctx.restore();
}


function rotate() {
  const sector = sectors[getIndex()];
  ctx.canvas.style.transform = `rotate(${ang - PI / 2}rad)`;

  if (!angVel && !result) {
    // Tr∆∞·ªõc khi quay l·∫ßn ƒë·∫ßu
    spinEl.textContent = "HPBD Be Chill";
    spinEl.style.background = "#faedcd"; // m√†u n·ªÅn l√∫c ch∆∞a quay
    spinEl.style.color = "#c1121f";      // ch·ªØ tr·∫Øng
  } else {
    // Trong l√∫c quay ho·∫∑c sau khi quay
    spinEl.textContent = sector.label;
    spinEl.style.background = sector.color;
    spinEl.style.color = sector.text;
  }
}




function frame() {
  // Fire an event after the wheel has stopped spinning
  if (!angVel && spinButtonClicked) {
    const finalSector = sectors[getIndex()];
    events.fire("spinEnd", finalSector);
    result = 1;
    spinButtonClicked = false; // reset the flag
    return;
  }

  angVel *= friction; // Decrement velocity by friction
  if (angVel < 0.002) angVel = 0; // Bring to stop
  ang += angVel; // Update angle
  ang %= TAU; // Normalize angle
  rotate();
}

function engine() {
  frame();
  requestAnimationFrame(engine);
}

function init() {
  sectors.forEach(drawSector);
  rotate(); // Initial rotation
  engine(); // Start engine
  spinEl.addEventListener("click", () => {
    if (!angVel) angVel = rand(0.45, 0.6);
    spinButtonClicked = true;
  });
}

init();
events.addListener("spinEnd", (sector) => {
  console.log(`Woop! You won ${sector.label}`);

  // Th√™m ƒë·ªô tr·ªÖ 1 gi√¢y (1000 ms) tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£
  setTimeout(() => {
    spinEl.textContent = `üéâ ${sector.label}`; // Hi·ªÉn th·ªã k·∫øt qu·∫£ quay
    spinEl.style.background = sector.color;
    spinEl.style.color = sector.text;

    // T·∫°o Popup ch√∫c m·ª´ng
    const popup = document.createElement("div");
    popup.style.position = "fixed";
    popup.style.top = "50%";
    popup.style.left = "50%";
    popup.style.transform = "translate(-50%, -50%)";
    popup.style.background = "#fff";
    popup.style.padding = "20px";
    popup.style.borderRadius = "10px";
    popup.style.boxShadow = "0 0 10px rgba(0, 0, 0, 0.5)";
    popup.style.textAlign = "center";
    popup.style.zIndex = "1000";

    // Th√™m n·ªôi dung ch√∫c m·ª´ng
    const message = document.createElement("p");
    message.textContent = `Em quay ƒë∆∞·ª£c ${sector.label} n√® `;
    message.classList.add("popup-message");
    popup.appendChild(message);

    // Th√™m l·ªùi gi·∫£i th√≠ch theo t·ª´ng m√≥n qu√†
    const reason = document.createElement("p");
    reason.textContent = reasonMapping[sector.label] || "Ch√∫ng t√¥i ƒë√£ ch·ªçn m√≥n qu√† ƒë·∫∑c bi·ªát n√†y cho b·∫°n!";
    reason.classList.add("popup-reason");
    popup.appendChild(reason);
    reason.classList.add("popup-reason");
    popup.appendChild(reason);


    // Th√™m n√∫t chuy·ªÉn trang
    const btn = document.createElement("button");
    btn.textContent = "ƒêi t·ªõi gi·ªè h√†ng";
    btn.style.marginTop = "20px";
    btn.style.padding = "10px 20px";
    btn.style.fontSize = "16px";
    btn.style.backgroundColor = "#4CAF50";
    btn.style.color = "#fff";
    btn.style.border = "none";
    btn.style.borderRadius = "5px";
    btn.style.cursor = "pointer";
    btn.addEventListener("click", () => {
      // Chuy·ªÉn trang t∆∞∆°ng ·ª©ng
      const pageMapping = {
        "M√†n h√¨nh + B√†n ph√≠m": "2.html",
        "Th·∫ª BHSK B·∫£o Vi·ªát": "BaoViet.html",
        "M√°y ch·∫°y b·ªô": "MayChayBo.html",
        "ThƒÉm b√°c s·ªπ": "BenhVien.html",
        "B√†n l√†m vi·ªác di ƒë·ªông": "BanLamViecDiDong.html",
        "Apple watch": "AppleWatchSE.html", // Th√™m page cho Apple watch
        "Skin care spa": "1.html", // Th√™m page cho Skin care spa
        "Voice course": "VoiceCourse.html", // Th√™m page cho Voice course
        "Mic thu √¢m": "mic.html", // Th√™m page cho Mic thu √¢m
      };
      

      const targetPage = pageMapping[sector.label];
      if (targetPage) {
        window.location.href = targetPage; // Chuy·ªÉn t·ªõi trang t∆∞∆°ng ·ª©ng
      }
    });

    popup.appendChild(btn);

    // Th√™m popup v√†o body
    document.body.appendChild(popup);
  }, 1000); // ƒê·ªô tr·ªÖ 1 gi√¢y (1000 ms)
});
